{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\nimport firebase from '../config/firebase';\nvar rrfConfig = {\n  userProfile: 'users',\n  attachAuthIsReady: true,\n  useFirestoreForProfile: true,\n  updateProfileOnLogin: false\n};\nexport var configureStore = function configureStore(preloadedState) {\n  var middlewares = [thunk.withExtraArgument({\n    getFirebase: getFirebase,\n    getFirestore: getFirestore\n  })];\n  var middlewareEnhancer = applyMiddleware.apply(void 0, middlewares);\n  var storeEnhancers = [middlewareEnhancer];\n  var composedEnhancer = composeWithDevTools.apply(void 0, storeEnhancers.concat([reactReduxFirebase(firebase, rrfConfig), reduxFirestore(firebase)]));\n  var store = createStore(rootReducer, preloadedState, composedEnhancer);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (module.hot) {\n      module.hot.accept('../reducers/rootReducer', function () {\n        var newRootReducer = require('../reducers/rootReducer').default;\n\n        store.replaceReducer(newRootReducer);\n      });\n    }\n  }\n\n  return store;\n};","map":{"version":3,"sources":["/Users/jessejohnston/Desktop/JagSite/revents/src/app/store/configureStore.js"],"names":["createStore","applyMiddleware","composeWithDevTools","reactReduxFirebase","getFirebase","reduxFirestore","getFirestore","thunk","rootReducer","firebase","rrfConfig","userProfile","attachAuthIsReady","useFirestoreForProfile","updateProfileOnLogin","configureStore","preloadedState","middlewares","withExtraArgument","middlewareEnhancer","storeEnhancers","composedEnhancer","store","process","env","NODE_ENV","module","hot","accept","newRootReducer","require","default","replaceReducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,sBAAhD;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,iBAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,WAAW,EAAE,OADG;AAEhBC,EAAAA,iBAAiB,EAAE,IAFH;AAGhBC,EAAAA,sBAAsB,EAAE,IAHR;AAIhBC,EAAAA,oBAAoB,EAAE;AAJN,CAAlB;AAOA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,cAAc,EAAI;AAC9C,MAAMC,WAAW,GAAG,CAACV,KAAK,CAACW,iBAAN,CAAwB;AAAEd,IAAAA,WAAW,EAAXA,WAAF;AAAeE,IAAAA,YAAY,EAAZA;AAAf,GAAxB,CAAD,CAApB;AACA,MAAMa,kBAAkB,GAAGlB,eAAe,MAAf,SAAmBgB,WAAnB,CAA3B;AAEA,MAAMG,cAAc,GAAG,CAACD,kBAAD,CAAvB;AAEA,MAAME,gBAAgB,GAAGnB,mBAAmB,MAAnB,SACpBkB,cADoB,SAEvBjB,kBAAkB,CAACM,QAAD,EAAWC,SAAX,CAFK,EAGvBL,cAAc,CAACI,QAAD,CAHS,GAAzB;AAMA,MAAMa,KAAK,GAAGtB,WAAW,CAACQ,WAAD,EAAcQ,cAAd,EAA8BK,gBAA9B,CAAzB;;AAEA,MAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,MAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,yBAAlB,EAA6C,YAAM;AACjD,YAAMC,cAAc,GAAGC,OAAO,CAAC,yBAAD,CAAP,CAAmCC,OAA1D;;AACAT,QAAAA,KAAK,CAACU,cAAN,CAAqBH,cAArB;AACD,OAHD;AAID;AACF;;AAED,SAAOP,KAAP;AACD,CAxBM","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\r\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers/rootReducer';\r\nimport firebase from '../config/firebase';\r\n\r\nconst rrfConfig = {\r\n  userProfile: 'users',\r\n  attachAuthIsReady: true,\r\n  useFirestoreForProfile: true,\r\n  updateProfileOnLogin: false\r\n};\r\n\r\nexport const configureStore = preloadedState => {\r\n  const middlewares = [thunk.withExtraArgument({ getFirebase, getFirestore })];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const storeEnhancers = [middlewareEnhancer];\r\n\r\n  const composedEnhancer = composeWithDevTools(\r\n    ...storeEnhancers,\r\n    reactReduxFirebase(firebase, rrfConfig),\r\n    reduxFirestore(firebase)\r\n  );\r\n\r\n  const store = createStore(rootReducer, preloadedState, composedEnhancer);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (module.hot) {\r\n      module.hot.accept('../reducers/rootReducer', () => {\r\n        const newRootReducer = require('../reducers/rootReducer').default;\r\n        store.replaceReducer(newRootReducer);\r\n      });\r\n    }\r\n  }\r\n\r\n  return store;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}