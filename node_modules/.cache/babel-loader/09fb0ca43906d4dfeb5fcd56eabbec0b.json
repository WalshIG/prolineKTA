{"ast":null,"code":"import _objectSpread from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jessejohnston/Desktop/JagSite/revents/src/features/event/EventForm/EventForm.jsx\";\n\n/*global google*/\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, Field } from 'redux-form';\nimport moment from 'moment';\nimport cuid from 'cuid';\nimport Script from 'react-load-script';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { Segment, Form, Button, Grid, Header } from 'semantic-ui-react';\nimport { composeValidators, combineValidators, isRequired, hasLengthGreaterThan } from 'revalidate';\nimport { createEvent, updateEvent } from '../eventActions';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextArea from '../../../app/common/form/TextArea';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport PlaceInput from '../../../app/common/form/PlaceInput';\n\nvar mapState = function mapState(state, ownProps) {\n  var eventId = ownProps.match.params.id;\n  var event = {};\n\n  if (eventId && state.events.length > 0) {\n    event = state.events.filter(function (event) {\n      return event.id === eventId;\n    })[0];\n  }\n\n  return {\n    initialValues: event\n  };\n};\n\nvar actions = {\n  createEvent: createEvent,\n  updateEvent: updateEvent\n};\nvar category = [{\n  key: 'drinks',\n  text: 'Drinks',\n  value: 'drinks'\n}, {\n  key: 'culture',\n  text: 'Culture',\n  value: 'culture'\n}, {\n  key: 'film',\n  text: 'Film',\n  value: 'film'\n}, {\n  key: 'food',\n  text: 'Food',\n  value: 'food'\n}, {\n  key: 'music',\n  text: 'Music',\n  value: 'music'\n}, {\n  key: 'travel',\n  text: 'Travel',\n  value: 'travel'\n}];\nvar validate = combineValidators({\n  title: isRequired({\n    message: 'The event title is required'\n  }),\n  category: isRequired({\n    message: 'Please provide a category'\n  }),\n  description: composeValidators(isRequired({\n    message: 'Please enter a description'\n  }), hasLengthGreaterThan(4)({\n    message: 'Description needs to be at least 5 characters'\n  }))(),\n  city: isRequired('city'),\n  venue: isRequired('venue'),\n  date: isRequired('date')\n});\n\nvar EventForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventForm, _Component);\n\n  function EventForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EventForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EventForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cityLatLng: {},\n      venueLatLng: {},\n      scriptLoaded: false\n    };\n\n    _this.handleScriptLoaded = function () {\n      return _this.setState({\n        scriptLoaded: true\n      });\n    };\n\n    _this.handleCitySelect = function (selectedCity) {\n      geocodeByAddress(selectedCity).then(function (results) {\n        return getLatLng(results[0]);\n      }).then(function (latlng) {\n        _this.setState({\n          cityLatLng: latlng\n        });\n      }).then(function () {\n        _this.props.change('city', selectedCity);\n      });\n    };\n\n    _this.handleVenueSelect = function (selectedVenue) {\n      geocodeByAddress(selectedVenue).then(function (results) {\n        return getLatLng(results[0]);\n      }).then(function (latlng) {\n        _this.setState({\n          venueLatLng: latlng\n        });\n      }).then(function () {\n        _this.props.change('venue', selectedVenue);\n      });\n    };\n\n    _this.onFormSubmit = function (values) {\n      values.date = moment(values.date).format();\n      values.venueLatLng = _this.state.venueLatLng;\n\n      if (_this.props.initialValues.id) {\n        _this.props.updateEvent(values);\n\n        _this.props.history.goBack();\n      } else {\n        var newEvent = _objectSpread({}, values, {\n          id: cuid(),\n          hostPhotoURL: '/assets/user.png',\n          hostedBy: 'Bob'\n        });\n\n        _this.props.createEvent(newEvent);\n\n        _this.props.history.push('/events');\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(EventForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          invalid = _this$props.invalid,\n          submitting = _this$props.submitting,\n          pristine = _this$props.pristine;\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Script, {\n        url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCTN8X_q_xtMYCnacteF4ZQj0RKXodI080&libraries=places\",\n        onLoad: this.handleScriptLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(Grid.Column, {\n        width: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Header, {\n        sub: true,\n        color: \"teal\",\n        content: \"Event Details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(Form, {\n        onSubmit: this.props.handleSubmit(this.onFormSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        type: \"text\",\n        component: TextInput,\n        placeholder: \"Give your event a name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"category\",\n        type: \"text\",\n        component: SelectInput,\n        options: category,\n        placeholder: \"What is your event about\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        type: \"text\",\n        component: TextArea,\n        rows: 3,\n        placeholder: \"Tell us about your event\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(Header, {\n        sub: true,\n        color: \"teal\",\n        content: \"Event Location details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"city\",\n        type: \"text\",\n        component: PlaceInput,\n        options: {\n          types: ['(cities)']\n        },\n        placeholder: \"Event city\",\n        onSelect: this.handleCitySelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), this.state.scriptLoaded && React.createElement(Field, {\n        name: \"venue\",\n        type: \"text\",\n        component: PlaceInput,\n        options: {\n          location: new google.maps.LatLng(this.state.cityLatLng),\n          radius: 1000,\n          types: ['establishment']\n        },\n        placeholder: \"Event venue\",\n        onSelect: this.handleVenueSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"date\",\n        type: \"text\",\n        component: DateInput,\n        dateFormat: \"YYYY-MM-DD HH:mm\",\n        timeFormat: \"HH:mm\",\n        showTimeSelect: true,\n        placeholder: \"Date and time of event\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(Button, {\n        disabled: invalid || submitting || pristine,\n        positive: true,\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(Button, {\n        onClick: this.props.history.goBack,\n        type: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return EventForm;\n}(Component);\n\nexport default connect(mapState, actions)(reduxForm({\n  form: 'eventForm',\n  enableReinitialize: true,\n  validate: validate\n})(EventForm));","map":{"version":3,"sources":["/Users/jessejohnston/Desktop/JagSite/revents/src/features/event/EventForm/EventForm.jsx"],"names":["React","Component","connect","reduxForm","Field","moment","cuid","Script","geocodeByAddress","getLatLng","Segment","Form","Button","Grid","Header","composeValidators","combineValidators","isRequired","hasLengthGreaterThan","createEvent","updateEvent","TextInput","TextArea","SelectInput","DateInput","PlaceInput","mapState","state","ownProps","eventId","match","params","id","event","events","length","filter","initialValues","actions","category","key","text","value","validate","title","message","description","city","venue","date","EventForm","cityLatLng","venueLatLng","scriptLoaded","handleScriptLoaded","setState","handleCitySelect","selectedCity","then","results","latlng","props","change","handleVenueSelect","selectedVenue","onFormSubmit","values","format","history","goBack","newEvent","hostPhotoURL","hostedBy","push","invalid","submitting","pristine","handleSubmit","types","location","google","maps","LatLng","radius","form","enableReinitialize"],"mappings":"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","sourcesContent":["/*global google*/\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport moment from 'moment';\r\nimport cuid from 'cuid';\r\nimport Script from 'react-load-script';\r\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\r\nimport { Segment, Form, Button, Grid, Header } from 'semantic-ui-react';\r\nimport {\r\n  composeValidators,\r\n  combineValidators,\r\n  isRequired,\r\n  hasLengthGreaterThan\r\n} from 'revalidate';\r\nimport { createEvent, updateEvent } from '../eventActions';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextArea from '../../../app/common/form/TextArea';\r\nimport SelectInput from '../../../app/common/form/SelectInput';\r\nimport DateInput from '../../../app/common/form/DateInput';\r\nimport PlaceInput from '../../../app/common/form/PlaceInput';\r\n\r\nconst mapState = (state, ownProps) => {\r\n  const eventId = ownProps.match.params.id;\r\n\r\n  let event = {};\r\n\r\n  if (eventId && state.events.length > 0) {\r\n    event = state.events.filter(event => event.id === eventId)[0];\r\n  }\r\n\r\n  return {\r\n    initialValues: event\r\n  };\r\n};\r\n\r\nconst actions = {\r\n  createEvent,\r\n  updateEvent\r\n};\r\n\r\nconst category = [\r\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n  { key: 'culture', text: 'Culture', value: 'culture' },\r\n  { key: 'film', text: 'Film', value: 'film' },\r\n  { key: 'food', text: 'Food', value: 'food' },\r\n  { key: 'music', text: 'Music', value: 'music' },\r\n  { key: 'travel', text: 'Travel', value: 'travel' }\r\n];\r\n\r\nconst validate = combineValidators({\r\n  title: isRequired({ message: 'The event title is required' }),\r\n  category: isRequired({ message: 'Please provide a category' }),\r\n  description: composeValidators(\r\n    isRequired({ message: 'Please enter a description' }),\r\n    hasLengthGreaterThan(4)({\r\n      message: 'Description needs to be at least 5 characters'\r\n    })\r\n  )(),\r\n  city: isRequired('city'),\r\n  venue: isRequired('venue'),\r\n  date: isRequired('date')\r\n});\r\n\r\nclass EventForm extends Component {\r\n  state = {\r\n    cityLatLng: {},\r\n    venueLatLng: {},\r\n    scriptLoaded: false\r\n  };\r\n\r\n  handleScriptLoaded = () => this.setState({ scriptLoaded: true });\r\n\r\n  handleCitySelect = selectedCity => {\r\n    geocodeByAddress(selectedCity)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latlng => {\r\n        this.setState({\r\n          cityLatLng: latlng\r\n        });\r\n      })\r\n      .then(() => {\r\n        this.props.change('city', selectedCity)\r\n      })\r\n  };\r\n\r\n  handleVenueSelect = selectedVenue => {\r\n    geocodeByAddress(selectedVenue)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latlng => {\r\n        this.setState({\r\n          venueLatLng: latlng\r\n        });\r\n      })\r\n      .then(() => {\r\n        this.props.change('venue', selectedVenue)\r\n      })\r\n  };\r\n\r\n  onFormSubmit = values => {\r\n    values.date = moment(values.date).format();\r\n    values.venueLatLng = this.state.venueLatLng;\r\n    if (this.props.initialValues.id) {\r\n      this.props.updateEvent(values);\r\n      this.props.history.goBack();\r\n    } else {\r\n      const newEvent = {\r\n        ...values,\r\n        id: cuid(),\r\n        hostPhotoURL: '/assets/user.png',\r\n        hostedBy: 'Bob'\r\n      };\r\n      this.props.createEvent(newEvent);\r\n      this.props.history.push('/events');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { invalid, submitting, pristine } = this.props;\r\n    return (\r\n      <Grid>\r\n        <Script\r\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCTN8X_q_xtMYCnacteF4ZQj0RKXodI080&libraries=places\"\r\n          onLoad={this.handleScriptLoaded}\r\n        />\r\n        <Grid.Column width={10}>\r\n          <Segment>\r\n            <Header sub color=\"teal\" content=\"Event Details\" />\r\n            <Form onSubmit={this.props.handleSubmit(this.onFormSubmit)}>\r\n              <Field\r\n                name=\"title\"\r\n                type=\"text\"\r\n                component={TextInput}\r\n                placeholder=\"Give your event a name\"\r\n              />\r\n              <Field\r\n                name=\"category\"\r\n                type=\"text\"\r\n                component={SelectInput}\r\n                options={category}\r\n                placeholder=\"What is your event about\"\r\n              />\r\n              <Field\r\n                name=\"description\"\r\n                type=\"text\"\r\n                component={TextArea}\r\n                rows={3}\r\n                placeholder=\"Tell us about your event\"\r\n              />\r\n              <Header sub color=\"teal\" content=\"Event Location details\" />\r\n              <Field\r\n                name=\"city\"\r\n                type=\"text\"\r\n                component={PlaceInput}\r\n                options={{ types: ['(cities)'] }}\r\n                placeholder=\"Event city\"\r\n                onSelect={this.handleCitySelect}\r\n              />\r\n              {this.state.scriptLoaded &&\r\n              <Field\r\n                name=\"venue\"\r\n                type=\"text\"\r\n                component={PlaceInput}\r\n                options={{\r\n                  location: new google.maps.LatLng(this.state.cityLatLng),\r\n                  radius: 1000,\r\n                  types: ['establishment']\r\n                }}\r\n                placeholder=\"Event venue\"\r\n                onSelect={this.handleVenueSelect}\r\n              />}\r\n              <Field\r\n                name=\"date\"\r\n                type=\"text\"\r\n                component={DateInput}\r\n                dateFormat=\"YYYY-MM-DD HH:mm\"\r\n                timeFormat=\"HH:mm\"\r\n                showTimeSelect\r\n                placeholder=\"Date and time of event\"\r\n              />\r\n              <Button\r\n                disabled={invalid || submitting || pristine}\r\n                positive\r\n                type=\"submit\"\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Button onClick={this.props.history.goBack} type=\"button\">\r\n                Cancel\r\n              </Button>\r\n            </Form>\r\n          </Segment>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapState, actions)(\r\n  reduxForm({ form: 'eventForm', enableReinitialize: true, validate })(\r\n    EventForm\r\n  )\r\n);\r\n"]},"metadata":{},"sourceType":"module"}