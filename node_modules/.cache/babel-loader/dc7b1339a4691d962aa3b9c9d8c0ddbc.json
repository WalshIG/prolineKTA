{"ast":null,"code":"import _classCallCheck from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jessejohnston/Desktop/JagSite/revents/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jessejohnston/Desktop/JagSite/revents/src/features/event/EventDashboard/EventDashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { deleteEvent } from '../eventActions';\nimport EventList from '../EventList/EventList';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport EventActivity from '../EventActivity/EventActivity';\n\nvar mapState = function mapState(state) {\n  return {\n    events: state.firestore.ordered.events,\n    loading: state.async.loading\n  };\n};\n\nvar actions = {\n  deleteEvent: deleteEvent\n};\n\nvar EventDashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventDashboard, _Component);\n\n  function EventDashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EventDashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EventDashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleDeleteEvent = function (eventId) {\n      return function () {\n        _this.props.deleteEvent(eventId);\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(EventDashboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          events = _this$props.events,\n          loading = _this$props.loading;\n      if (loading) return React.createElement(LoadingComponent, {\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(EventList, {\n        deleteEvent: this.handleDeleteEvent,\n        events: events,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(EventActivity, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return EventDashboard;\n}(Component);\n\nexport default connect(mapState, actions)(firestoreConnect([{\n  collection: 'events'\n}])(EventDashboard));","map":{"version":3,"sources":["/Users/jessejohnston/Desktop/JagSite/revents/src/features/event/EventDashboard/EventDashboard.jsx"],"names":["React","Component","Grid","connect","firestoreConnect","deleteEvent","EventList","LoadingComponent","EventActivity","mapState","state","events","firestore","ordered","loading","async","actions","EventDashboard","handleDeleteEvent","eventId","props","collection"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAK;AACzBC,IAAAA,MAAM,EAAED,KAAK,CAACE,SAAN,CAAgBC,OAAhB,CAAwBF,MADP;AAEzBG,IAAAA,OAAO,EAAEJ,KAAK,CAACK,KAAN,CAAYD;AAFI,GAAL;AAAA,CAAtB;;AAKA,IAAME,OAAO,GAAG;AACdX,EAAAA,WAAW,EAAXA;AADc,CAAhB;;IAIMY,c;;;;;;;;;;;;;;;;;;UACJC,iB,GAAoB,UAAAC,OAAO;AAAA,aAAI,YAAM;AACnC,cAAKC,KAAL,CAAWf,WAAX,CAAuBc,OAAvB;AACD,OAF0B;AAAA,K;;;;;;;6BAIlB;AAAA,wBACqB,KAAKC,KAD1B;AAAA,UACCT,MADD,eACCA,MADD;AAAA,UACSG,OADT,eACSA,OADT;AAEP,UAAIA,OAAJ,EAAa,OAAO,oBAAC,gBAAD;AAAkB,QAAA,QAAQ,EAAE,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEb,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,WAAW,EAAE,KAAKI,iBAA7B;AAAgD,QAAA,MAAM,EAAEP,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,CADF;AAUD;;;;EAnB0BV,S;;AAsB7B,eAAeE,OAAO,CAACM,QAAD,EAAWO,OAAX,CAAP,CACbZ,gBAAgB,CAAC,CAAC;AAAEiB,EAAAA,UAAU,EAAE;AAAd,CAAD,CAAD,CAAhB,CAA6CJ,cAA7C,CADa,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { deleteEvent } from '../eventActions';\r\nimport EventList from '../EventList/EventList';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport EventActivity from '../EventActivity/EventActivity';\r\n\r\nconst mapState = state => ({\r\n  events: state.firestore.ordered.events,\r\n  loading: state.async.loading\r\n});\r\n\r\nconst actions = {\r\n  deleteEvent\r\n};\r\n\r\nclass EventDashboard extends Component {\r\n  handleDeleteEvent = eventId => () => {\r\n    this.props.deleteEvent(eventId);\r\n  };\r\n\r\n  render() {\r\n    const { events, loading } = this.props;\r\n    if (loading) return <LoadingComponent inverted={true} />;\r\n\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <EventList deleteEvent={this.handleDeleteEvent} events={events} />\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <EventActivity />\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapState, actions)(\r\n  firestoreConnect([{ collection: 'events' }])(EventDashboard)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}