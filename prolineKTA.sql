-- MySQL Script generated by MySQL Workbench
-- Thu May 30 18:47:27 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema proline
-- -----------------------------------------------------
CREATE DATABASE IF NOT EXISTS `proline` DEFAULT CHARACTER SET utf8 ;
USE `proline` ;

-- -----------------------------------------------------
-- Table `proline`.`city_tab`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proline`.`city_tab` (
  `city_id` INT NOT NULL AUTO_INCREMENT,
  `city` VARCHAR(100) NOT NULL UNIQUE,
  PRIMARY KEY (`city_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `city_id_UNIQUE` ON `proline`.`city_tab` (`city_id` ASC);
CREATE UNIQUE INDEX `city_id_UNIQUE` ON `proline`.`city_tab` (`city` ASC);


-- -----------------------------------------------------
-- Table `proline`.`address_tab`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proline`.`address_tab` (
  `address_id` INT NOT NULL AUTO_INCREMENT,
  `address` VARCHAR(100) NOT NULL,
  `postal_code` VARCHAR(7) NOT NULL,
  `city_tab_city_id` INT NOT NULL,
  `property_tab_property_id` INT NOT NULL,
  PRIMARY KEY (`address_id`, `city_tab_city_id`),
  CONSTRAINT `fk_address_tab_city_tab`
    FOREIGN KEY (`city_tab_city_id`)
    REFERENCES `proline`.`city_tab` (`city_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_tab_property_tab`
	FOREIGN KEY (`property_tab_property_id`)
    REFERENCES `proline`.`property_tab` (`property_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `address_id_UNIQUE` ON `proline`.`address_tab` (`address_id` ASC) ;

CREATE INDEX `fk_address_tab_city_tab_idx` ON `proline`.`address_tab` (`city_tab_city_id` ASC) ;

CREATE INDEX `fk_address_tab_property_tab_idx` ON `proline`.`address_tab` (`property_tab_property_id` ASC) ;


-- -----------------------------------------------------
-- Table `proline`.`contractor_tab`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proline`.`contractor_tab` (
  `contractor_id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `email` VARCHAR(100) NULL DEFAULT NULL,
  `phone_num` VARCHAR(10) NULL DEFAULT NULL,
  `company` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`contractor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `contractor_id_UNIQUE` ON `proline`.`contractor_tab` (`contractor_id` ASC) ;


-- -----------------------------------------------------
-- Table `proline`.`property_tab`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `proline`.`property_tab` (
  `property_id` INT NOT NULL AUTO_INCREMENT,
  `property_number` VARCHAR(4) NOT NULL UNIQUE,
  `property_name` VARCHAR(100) NOT NULL,
  `property_type` ENUM('STRATA', 'RENTAL', 'SUNDRY', 'OTHER', 'OFFICE') NOT NULL,
  `comments` VARCHAR(500) NULL DEFAULT NULL,
  PRIMARY KEY (`property_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `property_id_UNIQUE` ON `proline`.`property_tab` (`property_id` ASC) ;
CREATE UNIQUE INDEX `property_number_UNIQUE` ON `proline`.`property_tab` (`property_number` ASC);

-- -----------------------------------------------------
-- Table `proline`.`key_tab`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proline`.`key_tab` (
  `key_id` INT NOT NULL AUTO_INCREMENT,
  `storage_location` VARCHAR(10) NOT NULL,
  `key_quantity` INT(11) NOT NULL,
  `creation_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `key_status` ENUM('IN', 'OUT', 'PENDING', 'LOST', 'SOLD', 'DESTROYED', 'RETURNED') NOT NULL DEFAULT 'IN',
  `active` BOOLEAN NOT NULL DEFAULT TRUE,
  `key_type` ENUM('MASTER', 'TRADES', 'FOB', 'GARAGE', 'ELEVATOR', 'PROLINE', 'GUEST-ROOM') NOT NULL,
  `key_number` INT(11) NOT NULL,
  `deposit` DOUBLE NULL,
  `office_location` ENUM('VICTORIA', 'COURTENAY', 'NANAIMO', 'WESTSHORE') NOT NULL,
  `address_tab_address_id` INT NOT NULL,
  PRIMARY KEY (`key_id`),
  CONSTRAINT `fk_key_tab_address_tab1`
    FOREIGN KEY (`address_tab_address_id`)
    REFERENCES `proline`.`address_tab` (`address_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_key_tab_address_tab1_idx` ON `proline`.`key_tab` (`address_tab_address_id` ASC) ;

CREATE UNIQUE INDEX `key_id_UNIQUE` ON `proline`.`key_tab` (`key_id` ASC) ;

-- Create insert and update Triggers on Keys table to increment the value of key_number if there already exists a set of keys.

DELIMITER //

CREATE OR REPLACE TRIGGER IncrementKeySetNumber BEFORE INSERT ON `proline`.`key_tab`
FOR EACH ROW BEGIN
	SET @max = (SELECT MAX(key_number) FROM key_tab WHERE key_type = NEW.key_type);
	IF (NEW.key_number <= @max)THEN
		SET NEW.key_number = @max + 1;
	END IF;
END//

CREATE OR REPLACE TRIGGER DeactivateNewKey BEFORE INSERT ON `proline`.`key_tab`
FOR EACH ROW BEGIN
	IF (NEW.key_status = "LOST" OR NEW.key_status = "SOLD" OR NEW.key_status = "DESTROYED") THEN
		SET NEW.active = 0;
	END IF;
END//

CREATE OR REPLACE TRIGGER DeactivateOldKey BEFORE UPDATE ON `proline`.`key_tab`
FOR EACH ROW BEGIN
	IF (NEW.key_status = "LOST" OR NEW.key_status = "SOLD" OR NEW.key_status = "DESTROYED") THEN
		SET NEW.active = 0;
	END IF;
END//

DELIMITER ;

-- Table `proline`.`transactions_tab`

CREATE TABLE IF NOT EXISTS `proline`.`trans_tab` (
  `trans_id` INT NOT NULL AUTO_INCREMENT,
  `checked_out` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `due_date` TIMESTAMP AS (DATE_ADD(`checked_out`, INTERVAL 30 DAY)) VIRTUAL,
  `checked_in` TIMESTAMP NULL,
  `deposit` DOUBLE NULL,
  `deposit_type` ENUM('CASH', 'CHEQUE') NULL,
  `fees` DOUBLE NULL,
  `notes` VARCHAR(500) NULL,
  `key_tab_key_id` INT NOT NULL,
  `users_tab_user_id` INT,
  `contractor_tab_contractor_id` INT NOT NULL,
  PRIMARY KEY (`trans_id`),
--   CONSTRAINT `fk_trans_tab_users_tab1`
-- 	FOREIGN KEY (`users_tab_user_id`)
--     REFERENCES `proline`.`users_tab`(`user_id`)
--     ON DELETE NO ACTION
--     ON UPDATE NO ACTION,
  CONSTRAINT `fk_trans_tab_contractor_tab1`
    FOREIGN KEY (`contractor_tab_contractor_id`)
    REFERENCES `proline`.`contractor_tab`(`contractor_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;
  
--   CREATE INDEX `fk_trans_tab_users_tab1_idx` ON `proline`.`trans_tab` (`users_tab_user_id` ASC) ;
  
  CREATE INDEX `fk_trans_tab_contractor_tab1_idx` ON `proline`.`trans_tab` (`contractor_tab_contractor_id` ASC) ;
  
  CREATE UNIQUE INDEX `trans_id_UNIQUE` ON `proline`.`trans_tab` (`trans_id` ASC);

-- -----------------------------------------------------
-- Table `proline`.`users_tab`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `proline`.`users_tab` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `username` VARCHAR(100) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `phone_num` VARCHAR(10) NULL DEFAULT NULL,
  `password` VARCHAR(100) NOT NULL,
  `priv_level` TINYINT NOT NULL,
  PRIMARY KEY (`user_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `user_id_UNIQUE` ON `proline`.`users_tab` (`user_id` ASC);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
